	/**
	 * The PluginData Class.
	 *
	 * @var   Data
	 * @since 5.1.2
	 */
	protected Data $data;

	/**
	 * The MoveFieldsRules Class.
	 *
	 * @var   MoveFieldsRules
	 * @since 5.1.2
	 */
	protected MoveFieldsRules $movefieldsrules;

	/**
	 * The FileContent Class.
	 *
	 * @var   FileContent
	 * @since 5.1.2
	 */
	protected FileContent $filecontent;

	/**
	 * The ContentMulti Class.
	 *
	 * @var   ContentMulti
	 * @since 5.1.2
	 */
	protected ContentMulti $contentmulti;

	/**
	 * The Files Class.
	 *
	 * @var   Files
	 * @since 5.1.2
	 */
	protected Files $files;

	/**
	 * Constructor.
	 *
	 * @param Data              $data              The PluginData Class.
	 * @param MoveFieldsRules   $movefieldsrules   The MoveFieldsRules Class.
	 * @param FileContent       $filecontent       The FileContent Class.
	 * @param ContentMulti      $contentmulti      The ContentMulti Class.
	 * @param Files             $files             The Files Class.
	 *
	 * @since 5.1.2
	 */
	public function __construct(Data $data, MoveFieldsRules $movefieldsrules,
		FileContent $filecontent, ContentMulti $contentmulti,
		Files $files)
	{
		$this->data = $data;
		$this->movefieldsrules = $movefieldsrules;
		$this->filecontent = $filecontent;
		$this->contentmulti = $contentmulti;
		$this->files = $files;
	}

	/**
	 * Update all files
	 *
	 * @param string   $bom   The header details [BOM] of the file
	 *
	 * @return  void
	 * @since 5.1.2
	 */
	public function update(string $bom): void
	{
		if ($this->data->exists())
		{
			foreach ($this->data->get() as $plugin)
			{
				if (ObjectHelper::check($plugin)
					&& $this->files->exists($plugin->key))
				{
					if (isset($plugin->fields_rules_paths)
						&& $plugin->fields_rules_paths == 2)
					{
						if (isset($plugin->config_fields)
							&& ArrayHelper::check($plugin->config_fields))
						{
							foreach ($plugin->config_fields as $field_name => $fieldsets)
							{
								foreach ($fieldsets as $fieldset => $fields)
								{
									foreach ($fields as $field)
									{
										$this->movefieldsrules->move(
											$field, $plugin->folder_path
										);
									}
								}
							}
						}

						if (isset($plugin->form_files)
							&& ArrayHelper::check($plugin->form_files))
						{
							foreach ($plugin->form_files as $file => $files)
							{
								foreach ($files as $field_name => $fieldsets)
								{
									foreach ($fieldsets as $fieldset => $fields)
									{
										foreach ($fields as $field)
										{
											$this->movefieldsrules->move(
												$field, $plugin->folder_path
											);
										}
									}
								}
							}
						}
					}

					foreach ($this->files->get($plugin->key) as $plugin_file)
					{
						if (is_file($plugin_file['path']))
						{
							$this->filecontent->set(
								$plugin_file['name'], $plugin_file['path'], $bom, $plugin->key
							);
						}
					}

					$this->files->remove($plugin->key);
					$this->contentmulti->remove($plugin->key);
				}
			}
		}
	}