	/**
	 * The Structure Class.
	 *
	 * @var   Structure
	 * @since 5.2.1
	 */
	protected Structure $structure;

	/**
	 * The ContentMulti Class.
	 *
	 * @var   ContentMulti
	 * @since 5.2.1
	 */
	protected ContentMulti $contentmulti;

	/**
	 * The switch to ensure the fix is just added once
	 *
	 * @var    bool
	 * @since 5.2.1
	 */
	protected bool $addedFix = false;

	/**
	 * Constructor.
	 *
	 * @param Structure      $structure      The Structure Class.
	 * @param ContentMulti   $contentmulti   The ContentMulti Class.
	 *
	 * @since 5.2.1
	 */
	public function __construct(Structure $structure, ContentMulti $contentmulti)
	{
		$this->structure = $structure;
		$this->contentmulti = $contentmulti;
	}

	/**
	 * Extracts component and view details from field attributes for a Modal Select field.
	 *
	 * @param array  $fieldAttributes The field attributes containing URLs and SQL table details.
	 *
	 * @return array An associative array with extracted component, view, views, table, id, and text.
	 * @since  5.1.2
	 */
	public function extract(array $fieldAttributes): array
	{
		$component = null;
		$views = null;
		$view = null;

		// Extract parameters from the given URL
		$extractParams = function ($url) {
			if (empty($url)) {
				return ['option' => null, 'view' => null];
			}
			$query = parse_url($url, PHP_URL_QUERY);
			parse_str($query, $params);
			return [
				'option' => $params['option'] ?? $params['amp;option'] ?? null,
				'view' => $params['view'] ?? $params['amp;view'] ?? null,
			];
		};

		// Process URL attributes
		foreach (['urlSelect', 'urlEdit', 'urlNew'] as $urlKey)
		{
			$params = $extractParams($fieldAttributes[$urlKey] ?? '');
			$component ??= $params['option'];
			if ($urlKey === 'urlSelect')
			{
				$views ??= $params['view'];
			}
			else
			{
				$view ??= $params['view'];
			}
		}

		// Determine the target table and extract the view name
		$field_target_table = $fieldAttributes['sql_title_table'] ?? '';
		if (!$view && !empty($field_target_table))
		{
			$clean_table = str_replace('__', '', $field_target_table);
			$view = substr($clean_table, strpos($clean_table, '_') + 1);
		}

		$sql_title_key = $fieldAttributes['sql_title_key'] ?? 'id';

		// if one field is not id, we add an override to the ModalSelectField as a FIX
		if (!$this->addedFix && $sql_title_key !== 'id')
		{
			$this->structure->build(
				['admin' => 'fieldmodalselect_override'],
				'fieldmodalselect_override'
			);
			$this->structure->build(
				['site' => 'fieldmodalselect_override'],
				'fieldmodalselect_override'
			);
			// to make sure the file is updated TODO
			$this->contentmulti->set('fieldmodalselect_override|BLABLA', 'blabla');

			$this->addedFix = true;
		}

		return [
			'modal_select' => true,
			'urlSelect' => $fieldAttributes['urlSelect'] ?? '',
			'hint' => $fieldAttributes['hint'] ?? '',
			'titleSelect' => $fieldAttributes['titleSelect'] ?? '',
			'iconSelect' => $fieldAttributes['iconSelect'] ?? '',
			'table' => $field_target_table,
			'id' => $sql_title_key,
			'text' => $fieldAttributes['sql_title_column'] ?? '',
			'component' => $component ?? 'error',
			'view' => $view ?? 'error',
			'views' => $views ?? 'error',
			'button' => false,
			'extends' => ''
		];
	}